<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/KCSCachedStore.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/KCSCachedStore</TokenIdentifier>
			<Abstract type="html">This application data store caches queries, depending on the policy.</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>
			
			<NodeRef refid="4"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/KCSCachedStore/setCachePolicy:</TokenIdentifier>
			<Abstract type="html">The cache policy used, by default, for this store</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) KCSCachePolicy cachePolicy</Declaration>
			
			
			<Anchor>//api/name/cachePolicy</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/KCSCachedStore/cachePolicy</TokenIdentifier>
			<Abstract type="html">The cache policy used, by default, for this store</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) KCSCachePolicy cachePolicy</Declaration>
			
			
			<Anchor>//api/name/cachePolicy</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/KCSCachedStore/cachePolicy</TokenIdentifier>
			<Abstract type="html">The cache policy used, by default, for this store</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) KCSCachePolicy cachePolicy</Declaration>
			
			
			<Anchor>//api/name/cachePolicy</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/KCSCachedStore/defaultCachePolicy</TokenIdentifier>
			<Abstract type="html">gets the default cache policy for all new KCSCachedStore&apos;s</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
			<Declaration>+ (KCSCachePolicy)defaultCachePolicy</Declaration>
			
			
			<Anchor>//api/name/defaultCachePolicy</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/KCSCachedStore/setDefaultCachePolicy:</TokenIdentifier>
			<Abstract type="html">Sets the default cache policy for all new KCSCachedStore&apos;s.</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
			<Declaration>+ (void)setDefaultCachePolicy:(KCSCachePolicy)cachePolicy</Declaration>
			<Parameters>
				<Parameter>
					<Name>cachePolicy</Name>
					<Abstract type="html">the default KCSCachePolicy for all new stores.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDefaultCachePolicy:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/KCSCachedStore/loadObjectWithID:withCompletionBlock:withProgressBlock:cachePolicy:</TokenIdentifier>
			<Abstract type="html">  Load objects from the store with the given IDs (optional cache policy).</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/KCSAppdataStore/loadObjectWithID:withCompletionBlock:withProgressBlock:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (KCSRequest *)loadObjectWithID:(id)objectID withCompletionBlock:(KCSCompletionBlock)completionBlock withProgressBlock:(KCSProgressBlock)progressBlock cachePolicy:(KCSCachePolicy)cachePolicy</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectID</Name>
					<Abstract type="html">this is an individual ID or an array of IDs to load</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block that gets invoked when all objects are loaded</Abstract>
				</Parameter><Parameter>
					<Name>progressBlock</Name>
					<Abstract type="html">A block that is invoked whenever the store can offer an update on the progress of the operation.</Abstract>
				</Parameter><Parameter>
					<Name>cachePolicy</Name>
					<Abstract type="html">override the object&apos;s cachePolicy for this load only.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">KCSRequest object that represents the pending request made against the store. Since version 1.36.0</Abstract></ReturnValue>
			<Anchor>//api/name/loadObjectWithID:withCompletionBlock:withProgressBlock:cachePolicy:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/KCSCachedStore/queryWithQuery:withCompletionBlock:withProgressBlock:cachePolicy:</TokenIdentifier>
			<Abstract type="html">Query or fetch an object (or objects) in the store (optional cache policy).</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
			<Declaration>- (KCSRequest *)queryWithQuery:(id)query withCompletionBlock:(KCSCompletionBlock)completionBlock withProgressBlock:(KCSProgressBlock)progressBlock cachePolicy:(KCSCachePolicy)cachePolicy</Declaration>
			<Parameters>
				<Parameter>
					<Name>query</Name>
					<Abstract type="html">A query to act on a store.  The store defines the type of queries it accepts, an object of type [KCSQuery query] causes all objects to be returned.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block that gets invoked when the query/fetch is &quot;complete&quot; (as defined by the store)</Abstract>
				</Parameter><Parameter>
					<Name>progressBlock</Name>
					<Abstract type="html">A block that is invoked whenever the store can offer an update on the progress of the operation.</Abstract>
				</Parameter><Parameter>
					<Name>cachePolicy</Name>
					<Abstract type="html">the policy for to use for this query only.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">KCSRequest object that represents the pending request made against the store. Since version 1.36.0</Abstract></ReturnValue>
			<Anchor>//api/name/queryWithQuery:withCompletionBlock:withProgressBlock:cachePolicy:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/KCSCachedStore/group:reduce:condition:completionBlock:progressBlock:cachePolicy:</TokenIdentifier>
			<Abstract type="html">Aggregate objects in the store and apply a function to all members in that group (optional cache policy).</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/KCSAppdataStore/group:reduce:condition:completionBlock:progressBlock:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (KCSRequest *)group:(id)fieldOrFields reduce:(KCSReduceFunction *)function condition:(KCSQuery *)condition completionBlock:(KCSGroupCompletionBlock)completionBlock progressBlock:(KCSProgressBlock)progressBlock cachePolicy:(KCSCachePolicy)cachePolicy</Declaration>
			<Parameters>
				<Parameter>
					<Name>fieldOrFields</Name>
					<Abstract type="html">The array of fields to group by (or a single NSString field name). If multiple field names are supplied the groups will be made from objects that form the intersection of the field values. For instance, if you have two fields &quot;a&quot; and &quot;b&quot;, and objects &quot;{a:1,b:1},{a:1,b:1},{a:1,b:2},{a:2,b:2}&quot; and apply the COUNT function, the returned KCSGroup object will have an array of 3 objects: &quot;{a:1,b:1,count:2},{a:1,b:2,count:1},{a:2,b:2,count:1}&quot;. For objects that don&apos;t have a value for a given field, the value used will be NSNull.</Abstract>
				</Parameter><Parameter>
					<Name>function</Name>
					<Abstract type="html">This is the function that is applied to the items in the group. If you do not want to apply a function, just use queryWithQuery:withCompletionBlock:withProgressBlock: instead and query for items that match specific field values.</Abstract>
				</Parameter><Parameter>
					<Name>condition</Name>
					<Abstract type="html">This is a KCSQuery object that is used to filter the objects before grouping. Only groupings with at least one object that matches the condition will appear in the resultant KCSGroup object.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block that is invoked when the grouping is complete, or an error occurs.</Abstract>
				</Parameter><Parameter>
					<Name>progressBlock</Name>
					<Abstract type="html">A block that is invoked whenever the store can offer an update on the progress of the operation.</Abstract>
				</Parameter><Parameter>
					<Name>cachePolicy</Name>
					<Abstract type="html">override the object&apos;s cachePolicy for this group query only.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">KCSRequest object that represents the pending request made against the store. Since version 1.36.0</Abstract></ReturnValue>
			<Anchor>//api/name/group:reduce:condition:completionBlock:progressBlock:cachePolicy:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/KCSCachedStore/import:KCS_DEPRECATED:</TokenIdentifier>
			<Abstract type="html">Seed the store&apos;s cache with entities</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/KCSCachedStore/exportCache</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)import:(NSArray *)jsonObjects KCS_DEPRECATED</Declaration>
			<Parameters>
				<Parameter>
					<Name>jsonObjects</Name>
					<Abstract type="html">an array of NSDictionary objects to place into the store&apos;s cache. These must have at least an _id field set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/import:KCS_DEPRECATED:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/KCSCachedStore/importCache:</TokenIdentifier>
			<Abstract type="html">Seed the store&apos;s cache with entities.</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/KCSCachedStore/exportCache</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)importCache:(NSArray *)jsonObjects</Declaration>
			<Parameters>
				<Parameter>
					<Name>jsonObjects</Name>
					<Abstract type="html">an array of NSDictionary objects to place into the store&apos;s cache. These must have at least an _id field set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/importCache:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/KCSCachedStore/exportCache</TokenIdentifier>
			<Abstract type="html">Export the cache as an array of entities ready for serialization.</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)exportCache</Declaration>
			
			<ReturnValue><Abstract type="html">an array of the entity data</Abstract></ReturnValue>
			<Anchor>//api/name/exportCache</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/KCSCachedStore/clearCaches</TokenIdentifier>
			<Abstract type="html">Clears the data caches.</Abstract>
			<DeclaredIn>KCSCachedStore.h</DeclaredIn>			
			
			<Declaration>+ (void)clearCaches</Declaration>
			
			
			<Anchor>//api/name/clearCaches</Anchor>
		</Token>
		
	</File>
</Tokens>